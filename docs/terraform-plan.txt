
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.compute.google_compute_address.static[0m will be created
[0m  [32m+[0m[0m resource "google_compute_address" "static" {
      [32m+[0m[0m address            = (known after apply)
      [32m+[0m[0m address_type       = "EXTERNAL"
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m effective_labels   = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m label_fingerprint  = (known after apply)
      [32m+[0m[0m name               = "gustavo-test-vm-static-ip-address"
      [32m+[0m[0m network_tier       = (known after apply)
      [32m+[0m[0m prefix_length      = (known after apply)
      [32m+[0m[0m project            = "solis-412713"
      [32m+[0m[0m purpose            = (known after apply)
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m subnetwork         = (known after apply)
      [32m+[0m[0m terraform_labels   = (known after apply)
      [32m+[0m[0m users              = (known after apply)
    }

[1m  # module.compute.google_compute_firewall.rules[0m will be created
[0m  [32m+[0m[0m resource "google_compute_firewall" "rules" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m description        = "Allow http and https from any"
      [32m+[0m[0m destination_ranges = (known after apply)
      [32m+[0m[0m direction          = (known after apply)
      [32m+[0m[0m enable_logging     = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "allow-web"
      [32m+[0m[0m network            = (known after apply)
      [32m+[0m[0m priority           = 1000
      [32m+[0m[0m project            = "solis-412713"
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m source_ranges      = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m target_tags        = [
          [32m+[0m[0m "web",
        ]

      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "80",
              [32m+[0m[0m "443",
            ]
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # module.compute.google_compute_instance.vm[0m will be created
[0m  [32m+[0m[0m resource "google_compute_instance" "vm" {
      [32m+[0m[0m can_ip_forward          = false
      [32m+[0m[0m cpu_platform            = (known after apply)
      [32m+[0m[0m current_status          = (known after apply)
      [32m+[0m[0m deletion_protection     = false
      [32m+[0m[0m effective_labels        = (known after apply)
      [32m+[0m[0m guest_accelerator       = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m instance_id             = (known after apply)
      [32m+[0m[0m label_fingerprint       = (known after apply)
      [32m+[0m[0m machine_type            = "e2-medium"
      [32m+[0m[0m metadata_fingerprint    = (known after apply)
      [32m+[0m[0m metadata_startup_script = <<-EOT
            #! /bin/bash
            sudo apt-get update 
            sudo apt-get install -yq nginx
            sudo systemctl enable nginx
            sudo systemctl start nginx
        EOT
      [32m+[0m[0m min_cpu_platform        = (known after apply)
      [32m+[0m[0m name                    = "gustavo-test-vm"
      [32m+[0m[0m project                 = "solis-412713"
      [32m+[0m[0m self_link               = (known after apply)
      [32m+[0m[0m tags                    = [
          [32m+[0m[0m "web",
        ]
      [32m+[0m[0m tags_fingerprint        = (known after apply)
      [32m+[0m[0m terraform_labels        = (known after apply)
      [32m+[0m[0m zone                    = "us-central1-c"

      [32m+[0m[0m boot_disk {
          [32m+[0m[0m auto_delete                = true
          [32m+[0m[0m device_name                = (known after apply)
          [32m+[0m[0m disk_encryption_key_sha256 = (known after apply)
          [32m+[0m[0m kms_key_self_link          = (known after apply)
          [32m+[0m[0m mode                       = "READ_WRITE"
          [32m+[0m[0m source                     = (known after apply)

          [32m+[0m[0m initialize_params {
              [32m+[0m[0m image                  = "debian-cloud/debian-12"
              [32m+[0m[0m labels                 = {
                  [32m+[0m[0m "vm_image" = "debian-12"
                }
              [32m+[0m[0m provisioned_iops       = (known after apply)
              [32m+[0m[0m provisioned_throughput = (known after apply)
              [32m+[0m[0m size                   = (known after apply)
              [32m+[0m[0m type                   = (known after apply)
            }
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m internal_ipv6_prefix_length = (known after apply)
          [32m+[0m[0m ipv6_access_type            = (known after apply)
          [32m+[0m[0m ipv6_address                = (known after apply)
          [32m+[0m[0m name                        = (known after apply)
          [32m+[0m[0m network                     = (known after apply)
          [32m+[0m[0m network_ip                  = (known after apply)
          [32m+[0m[0m stack_type                  = (known after apply)
          [32m+[0m[0m subnetwork                  = (known after apply)
          [32m+[0m[0m subnetwork_project          = (known after apply)

          [32m+[0m[0m access_config {
              [32m+[0m[0m nat_ip       = (known after apply)
              [32m+[0m[0m network_tier = (known after apply)
            }
        }
    }

[1m  # module.database.google_secret_manager_secret.db_secret_name[0m will be created
[0m  [32m+[0m[0m resource "google_secret_manager_secret" "db_secret_name" {
      [32m+[0m[0m create_time           = (known after apply)
      [32m+[0m[0m effective_annotations = (known after apply)
      [32m+[0m[0m effective_labels      = (known after apply)
      [32m+[0m[0m expire_time           = (known after apply)
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m project               = "solis-412713"
      [32m+[0m[0m secret_id             = "gustavo-test-pg"
      [32m+[0m[0m terraform_labels      = (known after apply)

      [32m+[0m[0m replication {
          [32m+[0m[0m auto {
            }
        }
    }

[1m  # module.database.google_secret_manager_secret_version.db_secret[0m will be created
[0m  [32m+[0m[0m resource "google_secret_manager_secret_version" "db_secret" {
      [32m+[0m[0m create_time           = (known after apply)
      [32m+[0m[0m deletion_policy       = "DELETE"
      [32m+[0m[0m destroy_time          = (known after apply)
      [32m+[0m[0m enabled               = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m is_secret_data_base64 = false
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m secret                = (known after apply)
      [32m+[0m[0m secret_data           = (sensitive value)
      [32m+[0m[0m version               = (known after apply)
    }

[1m  # module.database.google_sql_database.database[0m will be created
[0m  [32m+[0m[0m resource "google_sql_database" "database" {
      [32m+[0m[0m charset         = (known after apply)
      [32m+[0m[0m collation       = (known after apply)
      [32m+[0m[0m deletion_policy = "DELETE"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m instance        = "gustavo-test-pg"
      [32m+[0m[0m name            = "gustavo-test-db"
      [32m+[0m[0m project         = "solis-412713"
      [32m+[0m[0m self_link       = (known after apply)
    }

[1m  # module.database.google_sql_database_instance.instance[0m will be created
[0m  [32m+[0m[0m resource "google_sql_database_instance" "instance" {
      [32m+[0m[0m available_maintenance_versions = (known after apply)
      [32m+[0m[0m connection_name                = (known after apply)
      [32m+[0m[0m database_version               = "POSTGRES_15"
      [32m+[0m[0m deletion_protection            = false
      [32m+[0m[0m dns_name                       = (known after apply)
      [32m+[0m[0m encryption_key_name            = (known after apply)
      [32m+[0m[0m first_ip_address               = (known after apply)
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m instance_type                  = (known after apply)
      [32m+[0m[0m ip_address                     = (known after apply)
      [32m+[0m[0m maintenance_version            = (known after apply)
      [32m+[0m[0m master_instance_name           = (known after apply)
      [32m+[0m[0m name                           = "gustavo-test-pg"
      [32m+[0m[0m private_ip_address             = (known after apply)
      [32m+[0m[0m project                        = "solis-412713"
      [32m+[0m[0m psc_service_attachment_link    = (known after apply)
      [32m+[0m[0m public_ip_address              = (known after apply)
      [32m+[0m[0m region                         = (known after apply)
      [32m+[0m[0m root_password                  = (sensitive value)
      [32m+[0m[0m self_link                      = (known after apply)
      [32m+[0m[0m server_ca_cert                 = (sensitive value)
      [32m+[0m[0m service_account_email_address  = (known after apply)

      [32m+[0m[0m settings {
          [32m+[0m[0m activation_policy     = "ALWAYS"
          [32m+[0m[0m availability_type     = "ZONAL"
          [32m+[0m[0m connector_enforcement = (known after apply)
          [32m+[0m[0m disk_autoresize       = true
          [32m+[0m[0m disk_autoresize_limit = 0
          [32m+[0m[0m disk_size             = (known after apply)
          [32m+[0m[0m disk_type             = "PD_SSD"
          [32m+[0m[0m edition               = "ENTERPRISE"
          [32m+[0m[0m pricing_plan          = "PER_USE"
          [32m+[0m[0m tier                  = "db-f1-micro"
          [32m+[0m[0m user_labels           = (known after apply)
          [32m+[0m[0m version               = (known after apply)
        }
    }

[1m  # module.database.random_password.password[0m will be created
[0m  [32m+[0m[0m resource "random_password" "password" {
      [32m+[0m[0m bcrypt_hash      = (sensitive value)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m length           = 16
      [32m+[0m[0m lower            = true
      [32m+[0m[0m min_lower        = 0
      [32m+[0m[0m min_numeric      = 0
      [32m+[0m[0m min_special      = 0
      [32m+[0m[0m min_upper        = 0
      [32m+[0m[0m number           = true
      [32m+[0m[0m numeric          = true
      [32m+[0m[0m override_special = "!#$%&*()-_=+[]{}<>:?"
      [32m+[0m[0m result           = (sensitive value)
      [32m+[0m[0m special          = true
      [32m+[0m[0m upper            = true
    }

[1m  # module.network.google_compute_network.network[0m will be created
[0m  [32m+[0m[0m resource "google_compute_network" "network" {
      [32m+[0m[0m auto_create_subnetworks                   = false
      [32m+[0m[0m delete_default_routes_on_create           = false
      [32m+[0m[0m gateway_ipv4                              = (known after apply)
      [32m+[0m[0m id                                        = (known after apply)
      [32m+[0m[0m internal_ipv6_range                       = (known after apply)
      [32m+[0m[0m mtu                                       = (known after apply)
      [32m+[0m[0m name                                      = "gustavo-test-network"
      [32m+[0m[0m network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      [32m+[0m[0m numeric_id                                = (known after apply)
      [32m+[0m[0m project                                   = "solis-412713"
      [32m+[0m[0m routing_mode                              = (known after apply)
      [32m+[0m[0m self_link                                 = (known after apply)
    }

[1m  # module.network.google_compute_project_default_network_tier.default[0m will be created
[0m  [32m+[0m[0m resource "google_compute_project_default_network_tier" "default" {
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m network_tier = "STANDARD"
      [32m+[0m[0m project      = "solis-412713"
    }

[1m  # module.network.google_compute_router.router[0m will be created
[0m  [32m+[0m[0m resource "google_compute_router" "router" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "gustavo-test-network-router"
      [32m+[0m[0m network            = "gustavo-test-network"
      [32m+[0m[0m project            = "solis-412713"
      [32m+[0m[0m region             = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
    }

[1m  # module.network.google_compute_router_nat.nat_router[0m will be created
[0m  [32m+[0m[0m resource "google_compute_router_nat" "nat_router" {
      [32m+[0m[0m enable_dynamic_port_allocation      = (known after apply)
      [32m+[0m[0m enable_endpoint_independent_mapping = (known after apply)
      [32m+[0m[0m icmp_idle_timeout_sec               = 30
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m name                                = "gustavo-test-network-nat-router"
      [32m+[0m[0m nat_ip_allocate_option              = "AUTO_ONLY"
      [32m+[0m[0m project                             = "solis-412713"
      [32m+[0m[0m region                              = (known after apply)
      [32m+[0m[0m router                              = "gustavo-test-network-router"
      [32m+[0m[0m source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      [32m+[0m[0m tcp_established_idle_timeout_sec    = 1200
      [32m+[0m[0m tcp_time_wait_timeout_sec           = 120
      [32m+[0m[0m tcp_transitory_idle_timeout_sec     = 30
      [32m+[0m[0m udp_idle_timeout_sec                = 30

      [32m+[0m[0m log_config {
          [32m+[0m[0m enable = true
          [32m+[0m[0m filter = "ERRORS_ONLY"
        }
    }

[1m  # module.network.google_compute_subnetwork.subnet[0m will be created
[0m  [32m+[0m[0m resource "google_compute_subnetwork" "subnet" {
      [32m+[0m[0m creation_timestamp         = (known after apply)
      [32m+[0m[0m external_ipv6_prefix       = (known after apply)
      [32m+[0m[0m fingerprint                = (known after apply)
      [32m+[0m[0m gateway_address            = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m internal_ipv6_prefix       = (known after apply)
      [32m+[0m[0m ip_cidr_range              = "10.0.0.0/20"
      [32m+[0m[0m ipv6_cidr_range            = (known after apply)
      [32m+[0m[0m name                       = "gustavo-test-network-subnet"
      [32m+[0m[0m network                    = (known after apply)
      [32m+[0m[0m private_ip_google_access   = (known after apply)
      [32m+[0m[0m private_ipv6_google_access = (known after apply)
      [32m+[0m[0m project                    = "solis-412713"
      [32m+[0m[0m purpose                    = (known after apply)
      [32m+[0m[0m region                     = (known after apply)
      [32m+[0m[0m secondary_ip_range         = (known after apply)
      [32m+[0m[0m self_link                  = (known after apply)
      [32m+[0m[0m stack_type                 = (known after apply)
    }

[1m  # module.storage.google_storage_bucket.bucket[0m will be created
[0m  [32m+[0m[0m resource "google_storage_bucket" "bucket" {
      [32m+[0m[0m effective_labels            = (known after apply)
      [32m+[0m[0m force_destroy               = true
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m location                    = "US"
      [32m+[0m[0m name                        = "gustavo-test-bucket"
      [32m+[0m[0m project                     = (known after apply)
      [32m+[0m[0m public_access_prevention    = "enforced"
      [32m+[0m[0m rpo                         = (known after apply)
      [32m+[0m[0m self_link                   = (known after apply)
      [32m+[0m[0m storage_class               = "MULTI_REGIONAL"
      [32m+[0m[0m terraform_labels            = (known after apply)
      [32m+[0m[0m uniform_bucket_level_access = (known after apply)
      [32m+[0m[0m url                         = (known after apply)
    }

[1mPlan:[0m 14 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m bucket_location     = "US"
  [32m+[0m[0m bucket_name         = "gustavo-test-bucket"
  [32m+[0m[0m bucket_url          = (known after apply)
  [32m+[0m[0m compute_external_ip = (known after apply)
  [32m+[0m[0m compute_internal_ip = (known after apply)
  [32m+[0m[0m compute_name        = (known after apply)
  [32m+[0m[0m db_connection_name  = (known after apply)
  [32m+[0m[0m db_instance_name    = "gustavo-test-pg"
  [32m+[0m[0m db_secret_name      = (known after apply)
  [32m+[0m[0m network             = (known after apply)
  [32m+[0m[0m subnet              = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
